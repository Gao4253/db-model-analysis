class ArtClassificationModel(nn.Module):
def init(self, num_classes=10):
super().init()   
# Lightweight hybrid network
    self.mth = MobileNetTransformerHybrid(num_classes=num_classes)
    
    # Dynamic attention module
    self.dcsam = DCSAM(in_channels=256)
    
    # Classification head
    self.classifier = nn.Sequential(
        nn.AdaptiveAvgPool2d(1),
        nn.Flatten(),
        nn.Linear(256, num_classes)
    )
    
def extract_features(self, x):
    # MobileNet feature extraction
    local_feat = self.mth.mobilenet(x)
    
    # Transformer processing
    b, c, h, w = local_feat.shape
    global_feat = local_feat.flatten(2).permute(2, 0, 1)
    global_feat = self.mth.transformer(global_feat)
    global_feat = global_feat.permute(1, 2, 0).view(b, c, h, w)
    
    # Feature fusion
    fused_feat = self.mth.fusion(torch.cat([local_feat, global_feat], dim=1))
    
    # Dynamic attention
    attended_feat = self.dcsam(fused_feat)
    
    return attended_feat

def classify(self, features):
    return self.classifier(features)

def forward(self, x):
    features = self.extract_features(x)
    return self.classify(features)
